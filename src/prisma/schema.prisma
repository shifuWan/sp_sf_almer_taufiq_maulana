generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String? // Optional for password-based authentication
  accounts      Account[]
  sessions      Session[]
  projects      Projects[] // projects owned by the user
  memberships   Membership[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Projects {
  id      String @id @default(cuid())
  ownerId String
  name    String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Tasks[]
  memberships Membership[]
}

model Tasks {
  id          String  @id @default(cuid())
  projectId   String
  assigneeId  String
  title       String  @db.VarChar(255)
  description String? @db.Text
  status      String  @default("pending") // status can be "pending", "in-progress", "completed"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Membership {
  id        String @id @default(cuid())
  userId    String
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id])
}
